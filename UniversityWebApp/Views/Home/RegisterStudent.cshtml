@model UniversityWebApp.ViewModels.StudentViewModel

@{
    ViewBag.Title = "RegisterStudent";
}

@section Stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

}

<h2>Student Registration</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <form>
            <fieldset>
                <legend>Student Details</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DoB, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DoB, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DoB, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Nid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nid, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nid, "", new { @class = "text-danger" })
                    </div>
                </div>
                <button onclick="addResultRow()" type="button">Add Result</button>
                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedSubject, htmlAttributes: new { @class = "control-label col-md-2"})
                    <table id="AddItemsTable">
                        <tr>
                            <th>
                                @Html.DropDownListFor(Model => Model.SelectedSubject, new SelectList(Model.subjectList, "SubjectId", "SubjectName"), htmlAttributes: new { @class = "form-control", id = "Subjects" })
                                @Html.ValidationMessageFor(x => x.SelectedSubject, "", new { @class = "text-danger" })
                                @Html.DisplayNameFor(model => model.Grades[0].Result)</th>
                        </tr>
                    </table>
                </div>
            </fieldset>
        </form>
        <form>
            <fieldset>
                <legend>Guardian Details</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.GuardianFirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GuardianFirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GuardianFirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GuardianLastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GuardianLastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GuardianLastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GuardianPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GuardianPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GuardianPhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
            </fieldset>
        </form>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script>
        var counter = 0;
        function addResultRow() {
            if (counter < 3) {
                var table = document.getElementById("AddItemsTable");
                var row = table.insertRow(-1);
                var cell1 = row.insertCell(0);

                cell1.innerHTML = '<input type="text" id="' + counter + '"name="Grade[' + counter + '].Result"/> <button class="fa fa-close" style="color:red; border:0;background-color: transparent;font-size: large;" onclick="removeResultRow(this.id)" id="' + counter + '"/>';
                counter++;
                if (counter != 0) {
                    var button = document.getElementById(counter);
                    button.remove();
                }
            }
        }

        function removeResultRow() {
            var td = event.target.parentNode;
            var tr = td.parentNode;
            tr.parentNode.removeChild(tr);
            counter--;
        }
    </script>
}
